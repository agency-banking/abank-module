package com.agencybanking.core.storage;

import org.springframework.core.io.Resource;
import org.springframework.util.ObjectUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.util.UUID;

/**
 * API for simple storage service
 *
 * @author dubic
 */
public interface ResourceProvider {
    /**
     * save a file and contents recipients storage. The key is generated by the Storage implementation.
     * if the
     *
     * @param uploadedFile
     * @return the generated key
     */
    default String put(MultipartFile uploadedFile) {
        return put(uploadedFile, null);
    }

    /**
     * save a file and contents recipients storage.
     *
     * @param uploadedFile
     * @param key
     * @return
     */
    String put(MultipartFile uploadedFile, String key);

    String put(String bucket, MultipartFile uploadedFile, String key);

    String putBase64(String base64, String key);

    String putBase64(String base64);

    String put(InputStream contents);

    String putToPdf(String text, String key);

    void remove(String key);

    byte[] read(String key);

    String readBase64(String key);

    /**
     * Get the {@code InputStream} of the underlying resource. The caller should be responsible for closing the stream
     *
     * @param key
     * @return
     */
    InputStream stream(String key);

    File streamFile(String key);

    InputStream stream(String bucket, String key);

    Resource resource(String key);

    InputStream sampleStream(String key);


    default String uniqueKey(String name) {
        if (!ObjectUtils.isEmpty(name)) {
//            return Hex.encodeHexString((name+System.currentTimeMillis()+new Random(1000)).getBytes());
            return UUID.nameUUIDFromBytes((name + System.currentTimeMillis() + new Random(1000)).getBytes()).toString();
        }
//        return Hex.encodeHexString((""+System.currentTimeMillis()+new Random(1000)).getBytes());
        return UUID.nameUUIDFromBytes((System.currentTimeMillis() + "" + new Random(1000)).getBytes()).toString();
    }

}
